// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [authorId], references: [userId])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id])
  postId    Int
  parent    Comment?      @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  Int?
  replies   Comment[]     @relation("ChildComments")
  votes     CommentVote[]

  @@index([parentId])
  @@index([postId])
  @@index([authorId])
}

model User {
  id        Int       @id @default(autoincrement())
  userId    String    @unique
  username  String
  avatarURL String?
  posts     Post[]
  comments  Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(250)
  content   String    @db.VarChar(4000)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [userId])
  authorId  String
  votes     Vote[]
  comments  Comment[]
  upvotes   Int       @default(0)
  downvotes Int       @default(0)

  @@index([authorId])
}

model Vote {
  userId  String
  upvoted Boolean
  postId  Int
  Post    Post    @relation(fields: [postId], references: [id])

  @@id(name: "voteId", [userId, postId])
  @@index([postId])
}

model CommentVote {
  userId    String
  upvoted   Boolean
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id(name: "voteId", [userId, commentId])
  @@index([commentId])
}
